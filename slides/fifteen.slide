# Go Versions 1.15

Olga Skripko
8 April 2021

##  1.15 Overall
- Linker changes
- Some minor

##  Linker
Takes one or more object files (generated by a compiler or an assembler) and combines them into a single executable file, library file, or another "object" file.

Consists of:
- public symbols
- local symbols
- other module symbols

It has it's own address space for specific program.
May be loaded dynamically or statically.

## Binary creation
.image ./../images/process.png _ 800

##  Linker process
.image ./../images/linker.gif _ 500

##  Example program
.code ./../csv.go

##  Object file dump (go tool objdump csv > dump)
.code ./../dumpedCSV

##  Why it has to be changed
- For example, object files could be loaded concurrently
- Reachability could be computed with a parallel algorithm
- Reachable symbols can be loaded, copied to the output, and relocated concurrently
- Symbol resolution could be move to the compiler (which the compiler already does, but the linker redoes)
- Unlike the linker, many instances of the compiler can run in parallel or even be distributed.
- Many other like changing string-indexed symbol table to numbering of symbols.

##  What is done in 15 version for linker/compiler
- Reduces typical binary sizes by around 5% by eliminating certain types of GC metadata and more aggressively eliminating unused type metadata.
- For a representative set of large Go programs, linking is 20% faster and requires 30% less memory on average
- Relocations to symbols in parallel

##  Minor changes

- New embedded `tzdata` package -> Now we don't have to load it from OS.

- `encoding/json`: The package now has an internal limit to the maximum depth of nesting when decoding.
A JSON string of about 17MB, constructed by the linked code snippet, is enough to cause a stack overflow with the default 1GB stack limit.

- `io/ioutil`: TempDir and TempFile now reject patterns that contain path separators. That is, calls such as `ioutil.TempFile(“/tmp”, “../base*”)` will no longer succeed.

